QT += qml quick widgets

#CONFIG(debug, debug|release):{
#    QML_IMPORT_PATH = \
#        $$PWD/src/qml \
#        qrc:/kaj/qml
#}


INCLUDEPATH += $$PWD/include

DEFINES += KAJ_COMPILE_STATIC

#Function for copy to output
#defineTest(tCopyToOutput){
#    source = $$PWD/$$1
#    target = $$OUT_PWD/$$2
#    target ~= s,\\\\\\.?\\\\,\\,

#    win32 {
#        source = $$replace(source, /, \\)
#        target = $$replace(target, /, \\)
#        target ~= s,\\\\\\.?\\\\,\\,
#        copyCommand += xcopy /E /I /Y \"$$source\" \"$$target\"
#    } else {
#        source = $$replace(source, \\\\, /)
#        target = $$replace(target, \\\\, /)
#        copyCommand += test -d \"$$target\" || mkdir -p \"$$target\" && cp -R \"$$source\" \"$$target\"
#    }
#    message(Copy \"$$source\" to \"$$target\")

#    copydeploymentfolders.commands += $$copyCommand
#    first.depends += $(first) copydeploymentfolders
#    export(first.depends)
#    export(copydeploymentfolders.commands)
#    QMAKE_EXTRA_TARGETS += first copydeploymentfolders

#    export (QMAKE_EXTRA_TARGETS)
#}
defineTest(kajInstall){
    source = $$1
    target = $$2
    target ~= s,\\\\\\.?\\\\,\\,

    win32 {
        source = $$replace(source, /, \\)
        target = $$replace(target, /, \\)
        target ~= s,\\\\\\.?\\\\,\\,
        copyCommand += xcopy /E /I /Y \"$$source\" \"$$target\"
    } else {
        source = $$replace(source, \\\\, /)
        target = $$replace(target, \\\\, /)
        copyCommand += test -d \"$$target\" || mkdir -p \"$$target\" && cp -R \"$$source\" \"$$target\"
#        copyCommand += mkdir -p \"$$target\" && cp -R \"$$source\" \"$$target\"
    }
    message(Copy \"$$source\" to \"$$target\")

    defined(kajCopyCommands, var) {
        kajCopyCommands = "$$kajCopyCommands && ($$copyCommand)"
    } else {
        kajCopyCommands = "($$copyCommand)"
    }
    export(kajCopyCommands)
#    copydeploymentfolders.commands += $$copyCommand
#    first.depends += $(first) copydeploymentfolders
#    export(first.depends)
#    export(copydeploymentfolders.commands)
#    QMAKE_EXTRA_TARGETS += first copydeploymentfolders

#    export (QMAKE_EXTRA_TARGETS)
}
defineTest(kajAndroidInstall){
    !defined(ANDROID_PACKAGE_SOURCE_DIR, var) {
        message("ANDROID_PACKAGE_SOURCE_DIR not defined")
    }
    kajInstall($$1, $$ANDROID_PACKAGE_SOURCE_DIR)
}
defineTest(kajOutputInstall){
    kajInstall($$PWD/$$1, $$OUT_PWD/$$2)
}

defineTest(kajInstallDeps) {
    copydeploymentfolders.commands += $$kajCopyCommands
    first.depends += $(first) copydeploymentfolders
    export(first.depends)
    export(copydeploymentfolders.commands)
    QMAKE_EXTRA_TARGETS += first copydeploymentfolders
    export(QMAKE_EXTRA_TARGETS)
}
#include($$PWD/copyData.pri)

#android.source = android-build
#android.target = ..
#COPYFOLDERS += android

!contains(KAJ_MODULES, core) {
    message(Core module is not included. It will be incude automaticaly)
    KAJ_MODULES += core
}
for(m, KAJ_MODULES){
    include($$PWD/src/$${m}/$${m}.pri)
    QML_IMPORT_PATH += $$PWD/src/$${m}/qml
}

#Generate modules register file
PLUGIN_HEADER_INCLUDES="//plugins import header. generated by kaj.pri"
PLUGIN_HEADER_CONTENT="void register_kaj_modules() {"
GENERATED_PLUGINS_HEADER = "$$OUT_PWD/__kaj_plugins.h"
for(m, KAJ_MODULES){
    path = $$relative_path($$PWD/src/$${m}/src, $OUT_PWD)
    PLUGIN_HEADER_INCLUDES += "$${LITERAL_HASH}include \"$$path/module.h\""
    PLUGIN_HEADER_CONTENT += "  register_$${m}();"
}
for(m, KAJ_PLUGINS){
    include($$PWD/plugins/$${m}/$${m}.pri)
    path = $$relative_path($$PWD/plugins/$${m}/, $OUT_PWD)
    PLUGIN_HEADER_INCLUDES += "$${LITERAL_HASH}include \"$$path/$${m}.h\""
}
PLUGIN_HEADER_CONTENT += "}"
PLUGIN_HEADER_INCLUDES += $$PLUGIN_HEADER_CONTENT
write_file($$GENERATED_PLUGINS_HEADER, PLUGIN_HEADER_INCLUDES)|error("Aborting.")

#copyData()
#kajOutputInstall(android-build)


